---
- name: hcloud network and firewall
  hosts: localhost
  tasks:
    - name: "Create Network: k8s-network"
      hetzner.hcloud.network:
        name: k8s-network
        ip_range: 10.0.0.0/16
        state: present
        api_token: '{{ hcloud_token }}'

    - name: "Create Subnet: k8s-subnet"
      hetzner.hcloud.subnetwork:
        network: k8s-network
        ip_range: 10.0.1.0/24
        type: cloud
        network_zone: eu-central
        state: present
        api_token: '{{ hcloud_token }}'

    - name: "Create Rule: 00-default"
      hetzner.hcloud.firewall:
        name: 00-default
        rules:
          - direction: in
            protocol: icmp
            source_ips:
              - 0.0.0.0/0
              - ::/0
            description: allow icmp in
          - direction: in
            protocol: tcp
            source_ips:
              - 0.0.0.0/0
              - ::/0
            port: 22
            description: allow ssh on 22
        state: present
        api_token: '{{ hcloud_token }}'

    - name: "Create Rule: 01-web"
      hetzner.hcloud.firewall:
        name: 01-web
        rules:
          - direction: in
            protocol: tcp
            source_ips:
              - 0.0.0.0/0
              - ::/0
            port: 80
            description: allow http
          - direction: in
            protocol: tcp
            source_ips:
              - 0.0.0.0/0
              - ::/0
            port: 443
            description: allow https
        state: present
        api_token: '{{ hcloud_token }}'

    - name: "Create Rule: 02-k8s-internal"
      hetzner.hcloud.firewall:
        name: 02-k8s-internal
        rules:
          # Kubernetes API Server
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 6443
            description: k8s api server
          # etcd
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 2379-2380
            description: etcd client/peer
          # kubelet
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 10250
            description: kubelet api
          # kube-scheduler
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 10259
            description: kube-scheduler
          # kube-controller-manager
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 10257
            description: kube-controller-manager
          # NodePort Services
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 30000-32767
            description: nodeport services
          # Calico BGP
          - direction: in
            protocol: tcp
            source_ips:
              - 10.0.1.0/24
            port: 179
            description: calico bgp
          # Calico VXLAN (falls verwendet)
          - direction: in
            protocol: udp
            source_ips:
              - 10.0.1.0/24
            port: 4789
            description: calico vxlan
        state: present
        api_token: '{{ hcloud_token }}'

- name: hcloud servers
  hosts: hcloud
  tasks:
    - name: Create a server
      delegate_to: localhost
      hetzner.hcloud.server:
        name: '{{ ansible_host }}'
        server_type: '{{ hcloud_type }}'
        image: '{{ hcloud_image }}'
        state: '{{ hcloud_state | default("present") }}'
        location: '{{ hcloud_location }}'
        ssh_keys: '{{ hcloud_keys }}'
        firewalls:
          - 00-default
          - 02-k8s-internal
        api_token: '{{ hcloud_token }}'
      register: server_result

    - name: Assign private IP to server
      delegate_to: localhost
      hetzner.hcloud.server_network:
        network: k8s-network
        server: '{{ ansible_host }}'
        ip: '{{ access_ip }}'
        state: present
        api_token: '{{ hcloud_token }}'
      when: access_ip is defined

    - name: Reload Inventory
      ansible.builtin.meta: refresh_inventory

    - name: Create A-Record at INWX DNS
      delegate_to: localhost
      inwx.collection.dns:
        domain: 'gamma.red'
        type: A
        solo: true
        record: '{{ ansible_host | lower() | replace(".gamma.red", "") }}'
        value: '{{ ipv4 }}'
        username: '{{ inwx_username }}'
        password: '{{ inwx_password }}'

    - name: Create AAAA-Record at INWX DNS
      delegate_to: localhost
      inwx.collection.dns:
        domain: 'gamma.red'
        type: AAAA
        solo: true
        record: '{{ ansible_host | lower() | replace(".gamma.red", "") }}'
        value: '{{ ipv6 }}'
        username: '{{ inwx_username }}'
        password: '{{ inwx_password }}'

    - name: Create PTR-Record for ipv4 at hcloud
      delegate_to: localhost
      hetzner.hcloud.rdns:
        server: '{{ ansible_host }}'
        ip_address: '{{ ipv4 }}'
        dns_ptr: '{{ ansible_host }}'
        state: present
        api_token: '{{ hcloud_token }}'

    - name: Create PTR-Record for ipv6 at hcloud
      delegate_to: localhost
      hetzner.hcloud.rdns:
        server: '{{ ansible_host }}'
        ip_address: '{{ ipv6 }}'
        dns_ptr: '{{ ansible_host }}'
        state: present
        api_token: '{{ hcloud_token }}'

    - name: Wait for Server
      ansible.builtin.wait_for_connection:

    - name: Enable SSH forwarding for sudo
      become: true
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        insertafter: '^#?\s*Defaults\s+env_keep\b'
        line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'